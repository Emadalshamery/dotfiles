#!/bin/bash

# Adapted from: <https://gist.github.com/capocasa/134ce5312747e585a3e05cf70feebf7b>

set -euo pipefail

source "$HOME/.config/core-helpers.sh"

## Constants

EXECUTABLE="$(basename "$0")"

## Configuration

LOCKED_EXIT_CODE=-700
LOCKFILE_DIRECTORY=/tmp

## Parameters

debounce_duration=
run_command_now=false
command=()

## Actions

print-usage() {
  cat <<EOT
USAGE: $EXECUTABLE [OPTIONS] -- [COMMAND]

\`$EXECUTABLE\` is used to prevent multiple instances of the same command from
being run more than once. To do this, it checks for the existence of a lockfile
before running that command. If it exists, this would indicate that the command
is already being run, so it exits immediately. Otherwise, it creates a lockfile,
runs the command, then removes the lockfile when complete.


OPTIONS:

-d, --debounce SECONDS
    In addition to preventing multiple running instances of the same command
    from being run, \`$EXECUTABLE\` can also prevent a command from being run
    too many times within a certain timeframe. With this option, when called
    with a command, it will not run it immediately, but will start a timer,
    storing the duration in the lockfile along with the current time. If the
    lockfile already exists, it will reset the timer by updating the current
    time in the lockfile and exit immediately. This process continues until
    no other instances of the command are attempted to be run within the
    timeframe. This is commonly called "debouncing".

--no-color
  Disable color.

--debug
  Enable debugging.

-h, --help
    Print this message and exit.
EOT
}

parse-args() {
  local process_rest_of_args=0

  while [[ $# -gt 0 ]]; do
    if [[ $process_rest_of_args -eq 1 ]]; then
      command+=("${1:-}")
      shift
    else
      case "${1:-}" in
        --debounce | -d)
          debounce_duration=$2
          shift 2
          ;;
        --no-color)
          set-color-mode "false"
          shift
          ;;
        --debug)
          set-debug-mode "true"
          shift
          ;;
        --help | -h)
          print-usage
          exit 0
          ;;
        --)
          if [[ ${#command[@]} -gt 0 ]]; then
            echo "ERROR: It seems you've started to provide a command to run after providing options."
            echo "ERROR: Please specify the command after --."
            echo
            print-usage
            exit 1
          fi
          process_rest_of_args=1
          shift
          ;;
        *)
          command+=("${1:-}")
          shift
          ;;
      esac
    fi
  done
}

validate-args() {
  if [[ ${#command[@]} -eq 0 ]]; then
    echo "ERROR: No command to run!"
    exit 1
  fi
}

cleanup() {
  debug "Removing lockfile."
  rm -f "$lockfile"
}

main() {
  local command_hash
  local lockfile
  local current_time
  local read_time
  local read_duration
  local time_to_run
  local exit_status

  parse-args "$@"
  validate-args

  command_hash=$(echo -n "%s" "${command[@]}" | /opt/homebrew/bin/md5sum | head -c 32)
  lockfile="$LOCKFILE_DIRECTORY/lock-$command_hash"
  current_time=$(date +%s)

  if [[ -f "$lockfile" ]]; then
    if [[ -n $debounce_duration ]]; then
      debug "Current time: $current_time"
      IFS=$'\t' read -r read_time read_duration < "$lockfile"
      time_to_run="$((read_time+read_duration))"
      debug "Read time: $read_time"
      debug "Read duration: $read_duration"
      debug "Time to run: $time_to_run"
      if [[ $current_time -lt $time_to_run ]]; then
        debug "Another instance of this command is being run. Advancing timer by $read_duration."
        echo -e "${current_time}\t${read_duration}" > "$lockfile"
        exit $LOCKED_EXIT_CODE
      else
        debug "Another instance of this command is being run, but timer has expired."
        cleanup
      fi
    else
      debug "Another instance of this command is being run."
      exit $LOCKED_EXIT_CODE
    fi
  fi

  if [[ -n $debounce_duration ]]; then
    debug "Current time: $current_time"
    echo -e "${current_time}\t${debounce_duration}" > "$lockfile"
    while true; do
      current_time=$(date +%s)
      IFS=$'\t' read -r read_time read_duration < "$lockfile"
      time_to_run="$((read_time+read_duration))"
      debug "Current time: $current_time"
      debug "Read time: $read_time"
      debug "Read duration: $read_duration"
      debug "Time to run: $time_to_run"
      if [[ $current_time -lt $time_to_run ]]; then
        debug "It's not time to run this command yet, waiting a half a second..."
        sleep 0.5
      else
        debug "Time to run the command!"
        break
      fi
    done
  else
    touch "$lockfile"
  fi

  trap 'cleanup "$lockfile"' INT QUIT

  set +e
  debug "Executing command..."
  "${command[@]}"
  set -e
  exit_status=$?

  cleanup

  exit $exit_status
}

main "$@"
