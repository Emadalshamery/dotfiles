#!/bin/bash

set -euo pipefail

source "$HOME/.config/core-helpers.sh"

## Constants

WORKING_BRANCH_NAME="sync-$(date +%s)"

## Configuration

set-debug-mode "false"
set-color-mode "true"

## Parameters

repo_directory=
primary_branch_name=
dry_run=false

## Helpers

is_git_repository() {
  git rev-parse --is-inside-work-tree >/dev/null 2>&1
}

get_current_branch() {
  git rev-parse --abbrev-ref HEAD
}

has-staged-changes() {
  if git diff-index --quiet --cached HEAD >/dev/null 2>&1; then
    return 1
  else
    return 0
  fi
}

get-modified-deleted-and-untracked-files() {
  git ls-files --modified --deleted --others --deduplicate --exclude-standard
}

remove-branch() {
  local branch_name="$1"
  git branch -D "$branch_name" && (git push origin --delete "$branch_name" || true)
}

run-command() {
  local command_executable="$1"
  local command_args=("${@:2}")
  local exit_status
  local tempfile
  tempfile="$(mktemp)"

  local command="$command_executable"
  for command_arg in "${command_args[@]}"; do
    command+=" "
    command+=$(printf "%q" "$command_arg")
  done

  if [[ $dry_run == "true" ]]; then
    echo "Would have run: $(cyan "$command")"
  else
    set +e
    eval "$command" >"$tempfile" 2>&1
    exit_status=$?
    set -e

    if [[ $exit_status -ne 0 ]]; then
      error "Command '${command[*]}' failed with exit status $exit_status."
      echo "Command output:"
      cat "$tempfile"
      exit 1
    fi
  fi
}

## Actions

print-usage() {
  echo "\
USAGE: $0 OPTIONS

OPTIONS:

-d, --repo-directory PATH
    Path to the Git repository to sync.

-b, --primary-branch BRANCH
    Name of the primary branch to sync with.

-n, --dry-run
    Don't perform any Git operations; just print what would have happened.

-h, --help
    Print this message and exit.
"
}

parse-args() {
  while [[ $# -gt 0 ]]; do
    case "$1" in
      --repo-directory | -d)
        repo_directory="$2"
        shift 2
        ;;
      --primary-branch | -b)
        primary_branch_name="$2"
        shift 2
        ;;
      --dry-run | -n)
        dry_run="true"
        shift
        ;;
      --help | -h)
        print-usage
        exit 0
        ;;
      --no-color)
        set-color-mode "false"
        shift
        ;;
      *)
        error "Unknown option or argument: $1" >&2
        echo >&2
        print-usage >&2
        exit 1
        ;;
    esac
  done
}

validate-args() {
  if [[ -z $repo_directory ]]; then
    error "Missing required option: --repo-directory" >&2
    echo >&2
    print-usage >&2
    exit 1
  fi

  if [[ -z $primary_branch_name ]]; then
    error "Missing required option: --primary-branch-name" >&2
    echo >&2
    print-usage >&2
    exit 1
  fi
}

remove_working_branch() {
  info "Deleting branch \`$WORKING_BRANCH_NAME\`..."
  run-command remove-branch "$WORKING_BRANCH_NAME"
}

cleanup() {
  enforce-primary-branch "$(get_current_branch)"

  info "Unstaging staged files..."
  run-command git restore --staged .
  info "Reverting changes to existing files..."
  run-command git checkout .
  info "Removing added files..."
  run-command git clean -fd
}

change-directory() {
  info "Entering \`$repo_directory\`..."
  cd "$repo_directory"
}

enforce-git-repository() {
  if ! is_git_repository; then
    die "\`$repo_directory\` is not a Git repository."
    exit 1
  fi
}

enforce-primary-branch() {
  local current_branch="$1"

  if ! [[ "$current_branch" = "$primary_branch_name" ]]; then
    die "The current branch must be \`$primary_branch_name\` to continue."
    exit 1
  fi
}

pull-primary-branch() {
  info "Fetching updates..."
  run-command git pull --rebase --prune
}

commit-files-to-sync() {
  local files_to_sync=("$@")

  info "Committing all files..."

  for file in "${files_to_sync[@]}"; do
    if [[ $file == *.md || $file == .obsidian/* ]]; then
      run-command git add "$file"
    fi
  done

  run-command git commit -m "Automatic sync"
}

push-primary-branch() {
  info "Pushing \`$primary_branch_name\`..."
  run-command git push origin "$primary_branch_name"
}

main() {
  local files_to_sync=()
  local current_branch

  parse-args "$@"
  validate-args

  change-directory

  enforce-git-repository
  current_branch="$(get_current_branch)"
  enforce-primary-branch "$current_branch"

  while IFS= read -r file; do
    if [[ -n $file ]]; then
      files_to_sync+=("$file")
    fi
  done < <(get-modified-deleted-and-untracked-files)

  if ! has-staged-changes && [[ ${#files_to_sync[@]} -eq 0 ]]; then
    pull-primary-branch

    if [[ $dry_run == "true" ]]; then
      echo
      success "No changes would have been synced."
    else
      echo
      success "No changes to sync, all good!"
    fi
  else
    commit-files-to-sync "${files_to_sync[@]}"
    pull-primary-branch
    push-primary-branch
    if [[ $dry_run == "false" ]]; then
      echo
      success "Sync completed successfully!"
    fi
  fi
}

main "$@"
