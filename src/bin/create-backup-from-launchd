#!/bin/bash

source "$HOME/.config/core-helpers.sh"

LOG_FILE_PATH=$HOME/Library/Logs/create-backup.log
NEXT_SCHEDULED_TIME_FILE_PATH=$HOME/Library/Caches/create-backup.next.time
TEMP_LOG_FILE_PATH="$(mktemp "/tmp/$(basename "$0").XXXXXX")" || exit 1
COMMAND=("$HOME/.bin/create-backup" --no-color)

get-next-scheduled-time() {
  local now="$1"

  if [[ -f "$NEXT_SCHEDULED_TIME_FILE_PATH" ]]; then
    cat "$NEXT_SCHEDULED_TIME_FILE_PATH"
  else
    echo "$now"
  fi
}

time-to-run() {
  local now="$1"
  local next_scheduled_time

  next_scheduled_time=$(get-next-scheduled-time "$now")

  [[ $now -gt $next_scheduled_time || $now -eq $next_scheduled_time ]]
}

log-start() {
  local now="$1"

  {
    echo "***********************************************"
    echo "User: $USER"
    echo "Date: $(date -j -f "%s" "$now" +"%+")"
    echo "Next scheduled time: $(get-next-scheduled-time "$now")"
    echo "Current directory: $PWD"
    echo "Command:" "${COMMAND[@]}"
    echo
  } | "$HOME/.bin/log" --level INFO --log-file "$TEMP_LOG_FILE_PATH" -
}

log-start-of-output() {
  echo "---[ START OF OUTPUT ]-----------" | "$HOME/.bin/log" --level INFO --log-file "$TEMP_LOG_FILE_PATH" -
}

log-end-of-output() {
  echo "---[ END OF OUTPUT   ]-----------" | "$HOME/.bin/log" --level INFO --log-file "$TEMP_LOG_FILE_PATH" -
}

log-not-time-to-run() {
  echo "Not time to run yet. Aborting." | "$HOME/.bin/log" --level INFO --log-file "$TEMP_LOG_FILE_PATH" -
}

log-end() {
  {
    echo "***********************************************"
    echo
  } | "$HOME/.bin/log" --level INFO --log-file "$TEMP_LOG_FILE_PATH" -

  cat "$TEMP_LOG_FILE_PATH" >> "$LOG_FILE_PATH"
}

notify-start() {
  /opt/homebrew/bin/terminal-notifier -title "Backup" -message "New backup starting..."
}

notify-end() {
  local exitcode="$1"

  if [[ $exitcode -eq 0 ]]; then
    /opt/homebrew/bin/terminal-notifier -title "Backup" -message "Backup created successfully."
  else
    /opt/homebrew/bin/terminal-notifier -title "Backup" -message "Backup failed to be created. See log file for more: $LOG_FILE_PATH"
  fi
}

update-next-scheduled-time() {
  local now="$1"
  date -j -v "+1d" -f "%s" "$now" +"%s" > "$NEXT_SCHEDULED_TIME_FILE_PATH"
}

cleanup() {
  rm -f "$TEMP_LOG_FILE_PATH"
}

create-backup() {
  local now="$1"
  local exitcode

  log-start "$now"

  if time-to-run "$now"; then
    notify-start

    log-start-of-output
    "${COMMAND[@]}" 2>&1 | "$HOME/.bin/log" --level INFO --log-file "$TEMP_LOG_FILE_PATH" -
    exitcode=${PIPESTATUS[0]}
    log-end-of-output

    notify-end "$exitcode"
  else
    log-not-time-to-run
  fi

  log-end

  return $exitcode
}

main() {
  local now
  local exitcode

  now=$(date +"%s")

  trap cleanup INT QUIT

  create-backup "$now"
  exitcode=$?

  update-next-scheduled-time "$now"

  cleanup

  return $exitcode
}

main "$@"
