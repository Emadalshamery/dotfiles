#!/usr/bin/env bash

source "$HOME/.config/core-helpers.sh"

## Read-only variables

RESTIC_CONFIGURATION_FILE=$HOME/.restic.json
repository_location=
repository_password=
restic_command=()

## Parameters

repository_name=
custom_restic_args=()

## Actions

print-usage() {
  cat <<EOT
USAGE: $0 [<options> [-- <restic-options>]]

This is a wrapper script for \`restic\` that allows for backing up to multiple
repositories while keeping information about those repositories private. This
wrapper assumes that a configuration file exists which holds information about
possible repositories (i.e., their location and password). This configuration
file is useful because it can be kept out of version control while the wrapper
itself is kept under version control. When using this wrapper script, then, one
must specify the name of the repository to use. The script will then look up the
information about that repository in the configuration file.

ARGUMENTS:

<options> are:

-r, --repository NAME
  The name of the repository to use from $RESTIC_CONFIGURATION_FILE.

-h, --help
  Print this message and exit.

<restic-options> are the same options that \`restic\` takes.
EOT
}

parse-args() {
  local processing_restic_args=0

  while [[ $# -gt 0 ]]; do
    if [[ $processing_restic_args -eq 1 ]]; then
      custom_restic_args+=("$1")
      shift
    else
      case "$1" in
        --repository | -r)
          repository_name="$2"
          shift 2
          ;;
        --help | -h)
          print-usage
          exit 0
          ;;
        --)
          processing_restic_args=1
          shift
          ;;
        *)
          error "Unknown argument '$1'."
          error "If you intended to pass options to \`restic\`, specify them after --."
          echo
          print-usage
          exit 1
          ;;
      esac
    fi
  done
}

validate-args() {
  if [[ -z "$repository_name" ]]; then
    error "Missing repository name."
    echo
    print-usage
    exit 1
  fi
}

read-configuration-file() {
  local repository_names="$(jq --raw-output ".repositories | keys | join(\", \")" "$RESTIC_CONFIGURATION_FILE")"
  repository_location="$(jq --raw-output ".repositories.${repository_name}.location" "$RESTIC_CONFIGURATION_FILE")"
  repository_password="$(jq --raw-output ".repositories.${repository_name}.password" "$RESTIC_CONFIGURATION_FILE")"

  if [[ -z "$repository_location" ]]; then
    error "Cannot read repository location from $RESTIC_CONFIGURATION_FILE. This is probably a bug."
    exit 1
  fi

  if [[ -z "$repository_password" ]]; then
    error "Cannot read repository password from $RESTIC_CONFIGURATION_FILE. This is probably a bug."
    exit 1
  fi

  if [[ "$repository_location" == "null" || "$repository_password" == "null" ]]; then
    error "\
Cannot find repository '$repository_name' in $RESTIC_CONFIGURATION_FILE.

Possible repository names: $repository_names"
    exit 1
  fi
}

run-restic-command() {
  local restic_args=""
  local restic_subcommand
  local restic_subcommand_options=()

  for arg in "${custom_restic_args[@]}"; do
    if [[ ! "$arg" =~ ^- && -z "$restic_subcommand" ]]; then
      restic_subcommand="$arg"
    else
      restic_subcommand_options+=("$arg")
    fi
  done

  restic_args+="\"$restic_subcommand\"\n"

  if [[ "$restic_subcommand" == "backup" ]]; then
    while read -r line; do
      restic_args+="\"--exclude\"\n"
      restic_args+="\"${line/#~/$HOME}\"\n"
    done < <(jq --raw-output '.exclude | .[]' "$RESTIC_CONFIGURATION_FILE")
  fi

  for option in "${restic_subcommand_options[@]}"; do
    restic_args+="\"$option\"\n"
  done

  if [[ "$restic_subcommand" == "backup" ]]; then
    while read -r line; do
      restic_args+="\"${line/#~/$HOME}\"\n"
    done < <(jq --raw-output '.include | .[]' "$RESTIC_CONFIGURATION_FILE")
  fi

  export RESTIC_REPOSITORY="$repository_location"
  export RESTIC_PASSWORD="$repository_password"
  if [[ "$restic_args" == "" ]]; then
    /opt/homebrew/bin/restic
  else
    echo -e "$restic_args" | xargs /opt/homebrew/bin/restic
  fi
}

main() {
  parse-args "$@"
  validate-args

  if ! [[ -f "$RESTIC_CONFIGURATION_FILE" ]]; then
    error "Missing configuration file. Please create $RESTIC_CONFIGURATION_FILE."
    exit 1
  fi

  read-configuration-file

  run-restic-command
}

main "$@"
