#!/bin/bash

source "$HOME/.config/core-helpers.sh"

## Internal variables

USE_COLOR=false
NOW="$(date +"%s")"
PID_FILE_DIRECTORY=/tmp
PID_FILE_PATH="$PID_FILE_DIRECTORY/create-backup.pid"
LOCKED_EXIT_CODE=-700
NEXT_SCHEDULED_TIME_FILE_PATH="$HOME/Library/Caches/create-backup.next.time"
LOG_FILE_PATH="$HOME/Library/Logs/create-backup/$(date -j -f "%s" "$NOW" +"%Y%m%d_%H%M%S").log"

log_started=1

## Parameters

repository_name=
restic_args=()
is_automated_run=0
is_dry_run=0

### Actions

print-usage() {
  cat <<EOT
Create a new backup using Restic.

$0 <repository-name> [<options> [-- <restic-options>]]

ARGUMENTS
---------

<repository-name>
  The name of a repository in ~/.restic.yml. Specifies the location to back up
  to as well as any backup options specific for that repository.

<options>
  --automated
    Enables additional logic which will refuse to create a new backup if the
    computer is not plugged in, if it is connected to a public WiFi network, or
    if a backup was already created less than a day ago. This option is passed
    by the launch agent that runs this command periodically.

  -h, --help
    Print this message and exit.

<restic-options>
  The same options that \`restic\` takes.
EOT
}

parse-args() {
  local processing_restic_args=0

  while [[ $# -gt 0 ]]; do
    if [[ $processing_restic_args -eq 1 ]]; then
      if [[ "$1" == "--dry-run" ]]; then
        is_dry_run=1
      fi
      restic_args+=("$1")
      shift
    else
      case "$1" in
        --automated)
          is_automated_run=1
          shift
          ;;
        --dry-run | -n)
          is_dry_run=1
          shift
          ;;
        --help | -h)
          print-usage
          exit 0
          ;;
        --)
          processing_restic_args=1
          shift
          ;;
        *)
          if [[ -z "$repository_name" ]]; them
            repository_name="$1"
            shift 2
          else
            error "Unknown argument '$1'."
            error "If you intended to pass options to Borgmatic, specify them after --."
            echo
            print-usage
            exit 1
          fi
          ;;
      esac
    fi
  done

  if [[ $is_dry_run -eq 1 ]]; then
    restic_args+=("--dry-run")
  fi
}

validate-args() {
  if [[ -z "$repository_name" ]]; then
    error "Missing repository name."
    echo
    print-usage
    exit 1
  fi
}

cleanup() {
  log-end || true
  unlock
}

lock() {
  if [[ -f "$PID_FILE_PATH" ]]; then
    if ps -p "$(cat "$PID_FILE_PATH")" >/dev/null; then
      error "A backup is already in the process of being created."
      exit $LOCKED_EXIT_CODE
    else
      rm "$PID_FILE_PATH"
    fi
  else
    echo $$ > "$PID_FILE_PATH"
  fi
}

unlock() {
  rm -f "$PID_FILE_PATH"
}

get-next-scheduled-time() {
  if [[ -f "$NEXT_SCHEDULED_TIME_FILE_PATH" ]]; then
    cat "$NEXT_SCHEDULED_TIME_FILE_PATH"
  else
    echo "$NOW"
  fi
}

has-scheduled-time-been-reached() {
  local next_scheduled_time

  next_scheduled_time=$(get-next-scheduled-time)

  [[ $is_automated_run -eq 0 || $NOW -gt $next_scheduled_time || $NOW -eq $next_scheduled_time ]]
}

update-next-scheduled-time() {
  date -j -v "+1d" -f "%s" "$NOW" +"%s" > "$NEXT_SCHEDULED_TIME_FILE_PATH"
}

is-connected-to-power() {
  [[ $is_automated_run -eq 0 || "$(pmset -g ps | head -1)" =~ "AC Power" ]]
}

log() {
  "$HOME/.bin/log" --level INFO --log-file "$LOG_FILE_PATH" -
}

log-start() {
  {
    echo "***********************************************"
    echo "User: $USER"
    echo "Date: $(date -j -f "%s" "$NOW" +"%+")"
    echo "Next scheduled time: $(date -j -f "%s" "$(get-next-scheduled-time)" +"%+")"
    echo "Current directory: $PWD"
    echo "Command:" "${COMMAND[@]}"

    if [[ $is_automated_run -eq 1 ]]; then
      echo "Type of run: Automated"
    else
      echo "Type of run: Manual"
    fi

    echo
  } | log

  log_started=1
}

log-start-of-output() {
  echo "---[ START OF OUTPUT ]-----------" | log
}

log-end-of-output() {
  echo "---[ END OF OUTPUT   ]-----------" | log
}

log-scheduled-time-not-reached() {
  echo "Not time to run yet. Aborting." | log
}

log-not-connected-to-power() {
  echo "Not connected to power. Aborting." | log
}

log-end() {
  if [[ $log_started -eq 1 ]]; then
    {
      echo "***********************************************"
      echo
    } | log
  fi
}

notify() {
  /opt/homebrew/bin/terminal-notifier "$@"
}

notify-start() {
  notify -title "Backup" -message "New backup starting..."
}

notify-end() {
  local exitcode="$1"

  if [[ $exitcode -eq 0 ]]; then
    notify -title "Backup" -message "Backup ($repository_name) created successfully."
  else
    notify -title "Backup" -message "Backup ($repository_name) failed to be created. See log file for more: $LOG_FILE_PATH"
  fi
}

run-backup-command() {
  $HOME/.bin/restic \
    --repository "$repository_name" -- \
    backup \
    --verbose --verbose \
    "${restic_args[@]}"
}

main() {
  local exitcode

  parse-args "$@"
  validate-args

  if [[ $is_dry_run -eq 1 ]]; then
    run-backup-command
    return $?
  fi

  lock
  log-start || true
  trap cleanup INT TERM QUIT

  if ! has-scheduled-time-been-reached; then
    log-scheduled-time-not-reached || true
    return 2
  fi

  if ! is-connected-to-power; then
    log-not-connected-to-power || true
    return 2
  fi

  notify-start || true

  log-start-of-output || true
  run-backup-command 2>&1 | log
  exitcode=${PIPESTATUS[0]}
  log-end-of-output || true

  notify-end "$exitcode" || true

  update-next-scheduled-time
  exitcode=$?

  cleanup

  return $exitcode
}

main "$@"
