#!/usr/bin/env ruby

# Adapted from from Nathan's dotfiles: <https://github.com/aniero/dotfiles/blob/master/install.rb>
# which was originally taken from: <http://errtheblog.com/posts/89-huba-huba>

BEGIN { puts }
END { puts }

require 'fileutils'
require 'erb'
require 'optparse'
require 'pp'

module ColorHelpers
  def c_unimportant(str)
    str.foreground(:black).bright
  end
  def c_success(str)
    str.foreground(:green)
  end
  def c_failure(str)
    str.foreground(:red)
  end
  def c_filename(str)
    str.foreground(:blue).bright
  end
  def c_debugging(str)
    str.foreground(:cyan)
  end
  def c_emphasis(str)
    str.foreground(:yellow).bright
  end
end

module NoColorHelpers
  %w[c_unimportant c_success c_failure c_filename c_debugging c_emphasis].each do |method|
    define_method(method) {|arg| arg }
  end
end

class Main
  def self.run
    new.run
  end

  NAME = 'vimfiles'
  SOURCE_DIR = File.expand_path("../../src", __FILE__)
  HOME_DIR = File.expand_path(ENV['HOME'])

  def initialize
    load_color
    @options = {}
    @files = []
    @num_skipped_files = 0
    @num_updated_files = 0
  end

  def run
    parse_args
    build_file_list
    process_file_list
  end

  private

  def load_color
    begin
      require 'rainbow'
      @has_color = true
    rescue LoadError
      begin
        require 'rubygems'
        require 'rainbow'
        Sickill::Rainbow.enabled = true
        @has_color = true
      rescue LoadError => e
        warn "Install the 'rainbow' gem if you want colors."
        warn ""
        @has_color = false
      end
    end

    if @has_color
      extend ColorHelpers
    else
      extend NoColorHelpers
    end
  end

  def parse_args
    parser = OptionParser.new do |p|
      p.banner = <<EOT
USAGE: #{$0} [options]

This script will copy over anything in src/ as a dotfile. That is, src/vimrc is
copied to ~/.vimrc, src/vim is copied to ~/.vim, etc. If a file ends in .erb it
will be evaluated as an ERB template and the resulting content will copied to
the dotfile (`@options` within a template refers to the options parsed from the
command line).

Usually files are copied, but if you want to be able to modify the
configuration (and commit to this repo, etc.) as you go, then it's better to
create symlinks back to files in this repo instead. You can do that with the
`--link` option. When files are symlinked they are also usually done so
recursively; if a directory has a .no-recurse file in it, then the whole
directory will be symlinked as a whole rather than individual files.

The script takes care not to overwrite any files, unless you specify
`--force-templates` or `--force-all`.

Finally, if you want to know what the script will do before running it for
real, use the `--dry-run` option. For further output, use the `--verbose`
option.

Here's a rundown of all of the options:

EOT
      p.on("-n", "--noop", "--dry-run", "Don't actually copy or write any files.") do |val|
        @options[:dry_run] = true
      end
      p.on("-l", "--link", "Usually this script will copy files, but
                                     if you want to develop on this repo, then
                                     it's better to link files.") do
        @options[:link] = true
      end
      p.on("-f", "--force-templates", "Usually dotfiles that already exist are not
                                     overwritten. This will only cause dotfile
                                     templates to be applied (regardless of
                                     whether their target files exist or not).") do |val|
        @options[:force] = :templates
      end
      p.on("-F", "--force-all", "Overwrite every target file whether it
                                     already exists or not.") do |val|
        @options[:force] = :all
      end
      p.on("-V", "--verbose", "Show every command that is run when it is
                                     run.") do |val|
        @options[:verbose] = true
      end
      p.on_tail("-h", "--help", "You're looking at it!") do |val|
        puts p
        exit
      end
    end
    parser.parse!(ARGV)
    if ARGV.any?
      warn "Unknown arguments: #{ARGV.inspect}"
      warn parser
      exit 1
    end
  end

  def build_file_list
    recurse(SOURCE_DIR)
  end

  def recurse(dir)
    Dir.entries(dir).each do |path|
      next if path =~ %r{^\.}

      source = File.join(dir, path)
      source_basename = source.sub("#{SOURCE_DIR}/", "")
      short_source = source.sub(HOME_DIR, "~")
      target = File.join(HOME_DIR, "." + source_basename).sub(/\.erb$/, "")
      short_target = target.sub(HOME_DIR, "~")
      status = ""
      reason = 'already exists'

      if File.file?(source) && File.extname(source) == '.erb'
        template = ERB.new(File.read(source), nil, "-")  # allow <%- ... -%> tags like Rails
        content = template.result(binding).strip
        if File.exists?(target)
          existing_content = File.read(target)
          if content == existing_content
            status = @options[:force] == :all ? 'overwrite' : 'skip'
          else
            status = @options[:force] == :templates ? 'overwrite' : 'skip'
          end
        else
          status = 'install'
        end
        reason = 'same content'
      elsif File.directory?(source) && !File.exists?(File.join(source, '.no-recurse'))
        recurse(source)
        next
      else
        if File.exists?(target)
          status = @options[:force] == :all ? 'overwrite' : 'skip'
        else
          status = 'install'
        end
      end

      @files << {
        :source_basename => source_basename,
        :source => source,
        :short_source => short_source,
        :target => target,
        :short_target => short_target,
        :status => status,
        :reason => reason,
        :content => content
      }
    end
  end

  def process_file_list
    width = @files.map {|f| f[:status].length }.max

    if @options[:dry_run]
      puts "Here's what the output will look like on a 'real' run."
      puts c_emphasis("Nothing is being written to the filesystem.")
      puts
    end

    @files.each do |file|
      if file[:status] == 'skip'
        if @options[:verbose]
          puts c_failure(file[:status].rjust(width)) + " " + file[:short_target] + c_unimportant(" (#{file[:reason]})")
        end
        @num_skipped_files += 1
      else
        puts c_success(file[:status].rjust(width)) + " " + file[:short_target]
        if File.extname(file[:source]) == ".erb"
          unless @options[:dry_run]
            FileUtils.mkdir_p(File.dirname(file[:target]))
            File.open(file[:target], "w") {|f| f.write(file[:content]) }
          end
          puts c_debugging(file[:content]) if @options[:verbose]
        else
          target = File.join(HOME_DIR, "." + file[:source_basename])
          FileUtils.rm_rf(target)
          if @options[:link]
            cmd = ["ln", "-s", file[:source], target]
          else
            cmd = ["cp", "-R", file[:source], target]
          end
          pretty_cmd = cmd.map {|x| x =~ /[ ]/ ? x.inspect : x }.join(" ")
          puts c_debugging(pretty_cmd) if @options[:verbose]
          unless @options[:dry_run]
            FileUtils.mkdir_p(File.dirname(target))
            system(*cmd)
          end
        end
        @num_updated_files += 1
      end
    end

    if @num_updated_files == 0
      puts if @options[:verbose]
      puts c_success("All files are already up to date, you're good!")
      unless @options[:verbose]
        puts c_success("Run again with --verbose if you want to know why.")
      end
    elsif !@options[:dry_run]
      puts if @options[:verbose]
      puts c_success("#{NAME.capitalize} successfully updated!")
    end

    if @num_skipped_files > 0
      puts c_success("Run again with --force-templates or --force-all to force-update skipped files.")
    end
  end
end

Main.run

